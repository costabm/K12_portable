"""
Reading the windsim file generated by AMC, with all wind timeseries necessary to be then used in Orcaflex
time domain simulations
"""

import numpy as np
import h5py
# from scipy import signal
# from wind_field.wind_field_3D_applied_validation import wind_field_3D_applied_validation_func
# from straight_bridge_geometry import g_node_coor, arc_length, R

# # Input
# dt = 0.05
# wind_block_T = 3600
# beta_DB = np.deg2rad(100)
# f_min = 0.002
# f_max = 10
# n_freq = 2048*2
# n_nodes_validated = 10  # total number of nodes to assess wind speeds: STD, mean, co-spectra, correlation
# node_test_S_a = 0  # node tested for auto-spectrum
# n_nodes_val_coh = 5  # num nodes tested for assemblage of 2D correlation decay plots

def get_h5_windsim_file_with_wind_time_series(filename):
    """
    example: filename = "wind_field/AMC_wind_time_series/wind_direction=0.h5"
    """
    # Read file
    with h5py.File(filename, "r") as f:
        f_keys = list(f.keys())[0]
        f_time = np.array(f['Time'])
        f_el_length = np.array(f['girder_1']['Element Length'])
        f_glob_pos = np.array(f['girder_1']['Global Position'])
        f_loc_pos = np.array(f['girder_1']['Local Position'])
        f_gust = np.array(f['girder_1']['Gust Wind Speed'])
        f_line_type = np.array(f['girder_1']['Line Type'])
        f_U = np.array(f['girder_1']['Mean Wind Speed'])  # shape (n_nodes, 3), but: (n_nodes, (0, U, 0))
    f_gust = np.moveaxis(f_gust, 2, 0)  # from shape (n_nodes, time, 3) to (3, n_nodes, time)  # First dimension corresponds to (v, u, w). Note, windsim has swapped u and v!!
    # Changing first dimension from (v, u, w) to (U+u, u, v, w)
    f_ws = np.concatenate((f_gust[np.newaxis,1,:,:],f_gust[np.newaxis,1,:,:], f_gust[np.newaxis,0,:,:], f_gust[np.newaxis,2,:,:]), axis=0)
    f_ws[0] = f_U[:, 1, np.newaxis] + f_ws[0]  # U+u
    return f_time, f_ws

# # Processing
# wind_field_3D_applied_validation_func(g_node_coor, windspeed=f_ws, dt=dt, wind_block_T=wind_block_T,
#                                       beta_DB=beta_DB, arc_length=arc_length, R=R, Ii_simplified_bool=False,
#                                       f_min=f_min, f_max=f_max, n_freq=n_freq, n_nodes_validated=n_nodes_validated,
#                                       node_test_S_a=node_test_S_a, n_nodes_val_coh=n_nodes_val_coh)


def clone_windspeeds_when_g_nodes_are_diff_from_wind_nodes(windspeed, n_ws_nodes=25, desired_n_g_nodes=51):
    """
    Since AMC delivered a windsim file with half the nodes (25) as the FEM girder nodes (51), this function
    aims to find the nodes which the windsim refer to, and then make nearest neighbor to the remaining nodes
    """
    assert n_ws_nodes == windspeed.shape[1], "This function only works specifically when n_ws_nodes=25"
    desired_n_g_nodes


